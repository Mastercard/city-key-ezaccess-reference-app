/**
 * Mastercard Ezaccess For Issuers API
 * [![](https://mstr.cd/320oUJL)](https://developer.mastercard.com)  This is the Mastercard EzAccess for Issuers API.  This API uses OAuth 1.0a for authenticating client applications. For that, please refer to [Using OAuth 1.0a to Access Mastercard APIs](https://mstr.cd/31YcrTi).  The transport between client applications and Mastercard EzAccess service is secured using [TLS/SSL](https://w.wiki/PoA).
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 5.4.0
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/CardRange', 'model/Error', 'model/InlineResponse200'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/CardRange'), require('../model/Error'), require('../model/InlineResponse200'));
  } else {
    // Browser globals (root is window)
    if (!root.MastercardEzaccessForIssuersApi) {
      root.MastercardEzaccessForIssuersApi = {};
    }
    root.MastercardEzaccessForIssuersApi.CardPreparationApi = factory(root.MastercardEzaccessForIssuersApi.ApiClient, root.MastercardEzaccessForIssuersApi.CardRange, root.MastercardEzaccessForIssuersApi.Error, root.MastercardEzaccessForIssuersApi.InlineResponse200);
  }
}(this, function(ApiClient, CardRange, Error, InlineResponse200) {
  'use strict';

  /**
   * CardPreparation service.
   * @module api/CardPreparationApi
   * @version 1.0.0
   */

  /**
   * Constructs a new CardPreparationApi. 
   * @alias module:api/CardPreparationApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the generateEAIDs operation.
     * @callback module:api/CardPreparationApi~generateEAIDsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Generate list of Mastercard EzAccess IDs (EAIDs).
     * Generate list of Mastercard EzAccess IDs (EAIDs), each with its own Luhn checksum. An EAID may be used for card production in EMV tag 9F6E. Numbers in between startNumber and endNumber are the actual number of EAIDs generated including the startNumber and the endNumber. The maximum number of EAIDs that can be generated per request is 500.
     * @param {module:model/CardRange} cardRange 
     * @param {module:api/CardPreparationApi~generateEAIDsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200}
     */
    this.generateEAIDs = function(cardRange, callback) {
      var postBody = cardRange;
      // verify the required parameter 'cardRange' is set
      if (cardRange === undefined || cardRange === null) {
        throw new Error("Missing the required parameter 'cardRange' when calling generateEAIDs");
      }

      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200;
      return this.apiClient.callApi(
        '/eaids', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }
  };

  return exports;
}));
